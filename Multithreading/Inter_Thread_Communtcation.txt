> Two threads can communicate with each other by using wait(), notify() & notifyAll() methods.

> The thread expecting updation is responsible to call wait() method, then immediately the thread will enter into waiting state.

> The thread responsible to perform updation, after performing updation is responsible to call notify() method, then waiting thread
    will get that notification & continue its execution with those updated items.

**  wait(), notify() & notifyAll() are present in Object class.
    Reason: Thread can call these methods on any java object.

**  To call wait(), notify() & notifyAll() methods on any object, thread should be owner of that object.
    Thread should have lock of that object.
    Thread should be in synchronized area. Hence, we can call these methods only from Synchronized area.

    If the above cases are violated we get RuntimeError: IllegalMonitorStateException

> If a thread calls wait method on any object it immediately releases the lock of that particular object & enters waiting state.

> If a thread calls notify method on an object it releases the lock of object but may not immediately.

** Prototypes:
    public final void wait() throws InterruptedException
    public final native void wait(long ms) throws InterruptedException
    public final native void wait(long ms, int ns) throws InterruptedException

    public final native void notify()
    public final native void notifyAll()