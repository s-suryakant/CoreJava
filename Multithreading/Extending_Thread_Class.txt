Defining a thread by extending Thread class:

1. Thread Scheduler -
    > It is a part of JVM.
    > It is responsible to schedule threads, i.e. if multiple threads are waiting to get chance of execution then in which order threads will be
    executed is decided by Thread Scheduler.
    > We can't expect exact algorithm followed by Thread Scheduler. It varies from JVM to JVM. Hence, we can't expect threads execution order &
    exact output. Hence, whenever situation comes to multithreading there is no guarantee for exact output but we can provide several possible
    outputs.

2. Difference between t.start() & t.run() -
    > In case of t.start() a new thread is created which is responsible for the execution of run method.
    > In case of t.run() a new thread won't be created & run method will be executed just like a normal method call by main thread.

3. Importance of Thread class start() method -
    > Responsible for registering the thread with Thread Scheduler & all other mandatory activities. Hence, without executing Thread class start()
    there is no chance of starting a new thread in Java.
    > It invokes the run() method.

4. Overloading of run() method -
    > Always possible but Thread class start() method can invoke no argument run() method. The other overloaded method we have to call explicitly
    like a normal method call.
    Example: Utilize MyThreadOL & ThreadDemoOL.

5. If we are not overriding run() method -
    > Thread class run() method is implemented which has empty implementation. hence, we won't get any output.

6. Overriding of start() method -
    > If we override start() method then our start() method will be called just like a normal method call & new thread won't be created.
    Output will be produced by only main thread.

7. IllegalThreadStateException -
    > After starting a thread if we are trying to restart same thread then we get the runtime error.